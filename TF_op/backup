    mnist = tf.keras.datasets.mnist
    classic_mm_module = tf.load_op_library('./classic_mat_mul.so')

    batch_size = 128
    optimizer = tf.keras.optimizers.Adam()
    network = Network()
    (x_train, y_train), _ = tf.keras.datasets.mnist.load_data()
    dataset = tf.data.Dataset.from_tensor_slices(
        (x_train.reshape(60000, 784).astype('float32') / 255, y_train))
    dataset = dataset.shuffle(buffer_size=1024).batch(batch_size)
    # input_shape=(28, 28)

    @tf.function
    def train_on_batch(x, y):
        with tf.GradientTape() as tape:
            logits = network(x)
            loss = tf.keras.losses.categorical_crossentropy(y_true=y, y_pred=logits, from_logits=True)
            gradients = tape.gradient(loss, network.trainable_weights)
        optimizer.apply_gradients(zip(gradients, network.trainable_weights))
        return loss

    for step, (x, y) in enumerate(dataset):
        loss = train_on_batch(x, y)
        if step % 100 == 0:
            print(step, float(loss))